from django.db.models.signals import post_save, pre_save, post_migrate
from django.dispatch import receiver
from django.urls import reverse_lazy

from .models import Product, Listing, Bid, Comment, Answer, Message, User

def get_sys_user():
    try:
        sys_user = User.objects.get(username="system")
    except:
        sys_user = User.objects.create(username="system", email="noreplay@auctions.demo", password="system")
    

def get_url_detais():
    current_site = get_current_site(request)
    domain = current_site.domain
    return "http://" + domain
        

@receiver(post_save, sender=Product)
def product_handler(sender, instance, **kwargs):
    recipient = sender.instance.seller
    subject = _("Product") + sender.instance.name + _("added")
    content = _("The product'") + sender.instance.name + \
			_(" was added.\nGo to the ") + "<a href='" + get_url_details() +\
			"/account/" + recipient.pk + "/product/" + sender.instance.pk +\
			"/'>" + _("product page") + "</a>" +\
			_(" to see or modify its details and create listing to sell it on Auction$.") +\
			_("\nThis message is autogenerated. Do not reply.")
    Message.objects.create(sender=get_sys_user(), recipient=recipient, 
										subject=subject, content=content
										)
    
@receiver(post_save, sender=Listing)
def listing_handler(sender, **kwargs):
    recipient = sender.instance.product.seller
    subject = _("Listing for") + sender.instance.product.name + _(" was created")
    content = _("Listing was created. Details: ") + sender.instance + _("Click") +\
    "<a href='" + get_url_details() + "/account/" + recipient.pk +\
    "/listing/" + sender.instance.pk + _("/'>here</a> to manage listing.") +\
    _("\nThis message is autogenerated. Do not reply.")
    Message.objects.create(sender=get_sys_user(), recipient=recipient, 
										subject=subject, content=content
										)

@receiver(post_save, sender=Comment)
def comment_handler(sender, **kwargs):
    recipient = sender.instance.listing.product.seller
    subject = _("Comment was left in your listing on ") + sender.instance.time
    content = _("User ") + sender.instance.author.name +\
    _(" left a comment in your listing for ") + sender.instance.listing.product.name +\
    _(" on ") + sender.instance.time + _(".\nComment's content: ") +\
    sender.instance.content + _("\nGo to <a href='") + get_url_detais() +\
    "/account/" + recipient.pk + "/listing/" + sender.instance.listing.pk +\
    _("/'>here</a> to manage listing.\nThis message is autogenerated. Do not reply.")
    Message.objects.create(sender=get_sys_user(), recipient=recipient, 
										subject=subject, content=content
										)
										
@receiver(post_save, sender=Answer)
def answer_handler(sender, **kwargs):
    recipient = sender.instance.comment.author
    subject = _("Your comment was answered by ") + sender.instance.respondent.username +\
				_(" on ") + sender.instance.time
    content = _("The seller of ") + sender.instance.comment.listing.product.name +\
    _(" answered your comment left in the respective listing.") +\
    _("\nC=Text of your initial comment: ") + sender.instance.comment.content +\
    _("\nAnswered by ") + sender.instance.respondent.username +\
    _(" on ") + sender.instance.time + _(".\nAnswer's content: ") +\
    sender.instance.content + _("\nGo to <a href='") + get_url_detais() +\
    "/listing/" + sender.instance.comment.listing.pk +\
    _("/'>here</a> to see listing details.\nThis message is autogenerated. Do not reply.")
    Message.objects.create(sender=get_sys_user(), recipient=recipient, 
										subject=subject, content=content
										)
										
@receiver(pre_save, sender=Bid)
def pre_bid_handler(sender, instance, **kwargs):
    if instance.value <= instance.listing.max_bid:
        messages.failure = (request, f"Your bid is less or equal to the current highest bid. Please increase a bid value and try again. Current highest bid is %s" % str(instance.listing.max))

@receiver(post_save, sender=Bid)
def bid_handler(sender, instance, **kwargs):
    sysuser = get_sys_user()
    recipient1 = instance.bidder
    recipient2 = instance.listing.product.seller
    subject1 = _("You've just placed a bid on Auction$' listing for ") +\
                instance.listing.product.name
    subject2 = _("User ") + instance.bidder.username +\
                _(" placed a bid in your listing for ") +\
                instance.listing.product.name
    content1 = _("You have placed a new bid on the following listing:\n") +\
                instance.listing +\
                _("\nBid amount: ") + instance.value + "€" +\
                _("\nBid time: ") + instance.time +\
                _("\nGo to <a href='") + get_url_detais() + "/listing/" +\
                instance.listing.pk +\
                _("/'>listing page</a> to see details.\nThis message is autogenerated. Do not reply.")
    content2 = _("A bid was placed in your listing for ") +\
                instance.listing.product.name +\
                _("\nBidder: ") + instance.bidder.username +\
                _("\nBid amount: ") + instance.value + "€" +\
                _("\nBid time: ") + instance.time +\
                _("\nGo to <a href='") + get_url_detais() +\
                "/account/" + recipient.pk + "/listing/" +\
                instance.listing.pk +\
                _("/'>listing page</a> to see details.\nThis message is autogenerated. Do not reply.")
    raise NoneTypeError("pre_create message")
    Message.objects.create(sender=sysuser.pk, recipient=recipient1.pk, 
										subject=subject1, content=content1
										)
    Message.objects.create(sender=sysuser.pk, recipient=recipient2.pk, 
										subject=subject2, content=content2
										)
