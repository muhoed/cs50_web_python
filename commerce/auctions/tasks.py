#from commerce.celery import app as celery_app
from celery import shared_task
from .models import Message, get_sys_user


#@celery_app.task
@shared_task
def listing_ended_handler(self, instance):
	try:
		sysuser = get_sys_user()
		recipient = instance.product.seller
		
		if instance.winner and not instance.cancelled_on:
			subject = _("The listing for %s was ended") % instance.product.name
			content = _("The listing for %(prod)s was ended.<br>The user %(user)s placed \
			the highest bid and is the listing winner.\
			<br>You can contact the winner through the 'Contact buyer' button on <a href=\
			'%(url)s'>the listing page</a> or directly by email %(email)s.<br>Please make \
			sure you ship the product to the winner at her/his delivery address upon payment.\
			<br>%(address)s.<br>This message is autogenerated. Do not reply.") %\
						{
							'prod': instance.product.name, 
							'user': recipient1.username, 
							'url': instance.get_absolute_url(), 
							'email': recipient1.emailaddress_set.filter(email_type='CT').values('email_address') or recipient1.email, 
							'address': recipient1.address_set.get(address_type='DL')
						}
			recipient1 = instance.winner
			subject1 = _("You just won the listing for %s.") % instance.product.name
			content1 =_("Congratulation! You are the winner in the Auction$ listing \
			for %(prod)s.<br>The listing was ended on %(time)s and your bid is the hishest \
			one.<br>You can contact the seller through the 'Contact seller' \
			button on <a href='%(url)s'>the listing page</a> or directly by email \
			%(email)s.<br>Payment for the product shall be sent to %(email1)s. Please make \
			sure you mark the listing as 'Paid' after the payment is done. The product \
			will be shipped to your delivery address at:<br>%(address)s.<br>Please mark it as \
			'Delivered' upon receipt if it meets the listing description and conditions.\
			<br>This message is autogenerated. Do not reply.") %\
						{
							'prod': instance.product.name, 
							'time': instance.end_time, 
							'url': instance.get_absolute_url(), 
							'email': recipient.emailaddress_set.filter(email_type='CT').values('email_address') or recipient.email, 
							'email1': recipient.emailaddress_set.filter(email_type='PT').values('email_address') or recipient.email, 
							'address': recipient1.address_set.get(address_type='DL')
						}
			Message.objects.create(sender=sysuser, recipient=recipient1, 
											subject=subject1, content=content1
											)
		elif not instance.cancelled_on:
			subject = _("Listing for %s was ended") % instance.product.name
			content = _("Your listing for %(prod)s was ended without a winner. \
			<br>Details: %(listing)s.<br>Click <a href='%(url)s'>here</a> to relist product.\
			<br>This message is autogenerated. Do not reply.") % {
					'prod': instance.product.name,
					'listing': instance, 
					'url': instance.get_absolute_url()
					}
		else:
			raise instance.DoesNotExist
			
		Message.objects.create(sender=sysuser, recipient=recipient, 
											subject=subject, content=content
											)
	except instance.DoesNotExist:
		pass
